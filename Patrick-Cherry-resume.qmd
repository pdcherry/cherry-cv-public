---
title: "Patrick Cherry's CV"
position: "Senior Scientist | Genomics"
address: "San Francisco, California"
# profilepic:
www: "pdcherry.github.io"
github: pdcherry
linkedin: p-cherry
orcid: "0000-0001-6421-2035"
googlescholar: "TVHw14oAAAAJ"
headcolor: 414141
params:
  pdf_mode:
    value: FALSE
  resume_type_param: "bfx"
  is_resume: TRUE
format:
  html:
    keep-md: true
    toc: true
    toc-expand: 2
    toc-depth: 2
#css: cynthia_cv.css
execute:
  freeze: true
---

[{{< fa file-pdf >}} Download resume version as pdf](Patrick-Cherry-resume.pdf)

```{r resume setting, echo = FALSE}
is_resume <- params$is_resume
#is_resume <- TRUE
resume_type_setting <- params$resume_type_param
#resume_type_setting <- "bfx"
# options are wetlab or bfx
```

```{r set params based on pandoc format, echo = FALSE, warning = FALSE, message = FALSE}
output_format <- knitr::pandoc_to()

if(exists("params$is_resume")){
  is_resume <- params$is_resume
} else if(!exists("params$is_resume")){
  
  if(is.null(output_format)){
  } else if(output_format=="html"){
    is_resume <- FALSE
    resume_type_setting <- params$resume_type_param
  } else if(output_format=="pdf"){
    is_resume <- TRUE
    resume_type_setting <- params$resume_type_param
  }
}

#paste("output_format =", output_format)
```

<!-- Note to self: if the error shows up: -->
<!-- In grepl("^\\s*$", x) : unable to translate to a wide string -->
<!-- re-type the sptring to avoid non-ASCII characters -->
<!-- see https://stackoverflow.com/questions/76680882/unable-to-translate-to-a-wide-string -->
```{r read in and filter cv data, include = FALSE, eval = TRUE}
knitr::opts_chunk$set(
  results = 'asis', 
  echo = FALSE
)

library(magrittr) # For the pipe
library(dplyr)    # for filter()
source("cv_printing_functions.r")

# Read in all data and initialize a CV printer object
CV <- create_CV_object(
  data_location = "CV_data/",  
  pdf_mode = params$pdf_mode
)

if (is_resume == TRUE){
  CV$entries_data <- filter(CV$entries_data, `in_resume` == TRUE)
}

if (is_resume == TRUE){
  CV$entries_data <- CV$entries_data %>%
    mutate("description_bullets" = if_else(section == "presentations", "", description_bullets))
}
```
```{r filter entries based on bfx or wetlab}
CV$entries_data <- filter(CV$entries_data, resume_type == resume_type_setting | resume_type == "N/A" )
CV$text_blocks <- filter(CV$text_blocks, resume_type == resume_type_setting | is.na(resume_type) )
```
```{r}
# When in pdf export mode the little dots are unaligned, so fix that with some conditional CSS.
if(params$pdf_mode) {
    cat("
<style>
:root{
  --decorator-outer-offset-left: -6.5px;
}
</style>")
}
```

<!-- :::: {.print-only .contact-block} -->
<!-- Patrick Cherry {#title} -->
<!-- -------------------------------------------------------------------------------- -->
<!-- ```{r display contact info print} -->
<!-- CV %>% print_contact_info() -->
<!-- ``` -->
<!-- :::: -->

:::{.no-print}
:::: aside
::::: {.side-contact-list}
Contact {#contact}
--------------------------------------------------------------------------------
```{r display contact info web}
CV %>% print_contact_info()
```

:::::: {.disclaimer}

Last updated on `r Sys.Date()`.

Data-driven résumé made in R using Quarto.
::::::

:::::
::::
:::

```{r intro section}
# Note the special double pipe so we modify the CV object in place
CV %<>% print_text_block('intro') 
```

{{< fa graduation-cap >}} Education {data-icon=graduation-cap data-concise=true}
--------------------------------------------------------------------------------
```{r education data}
CV %<>% print_section('education')
```

{{< fa suitcase >}} Industry Experience {data-icon=suitcase}
--------------------------------------------------------------------------------
::: aside
```{r industy experience aside}
CV %<>% print_text_block('industy_experience_aside')
```
:::
```{r industry_ positions data}
CV %<>% print_section('industry_positions')
```

{{< fa flask >}} Research Experience {data-icon=flask}
--------------------------------------------------------------------------------
::: aside
```{r research experience aside}
CV %<>% print_text_block('research_experience_aside')
```
:::
```{r research experience data}
CV %<>% print_section('research_experience')
```

{{< fa lightbulb >}} Intellectual Property {data-icon=lightbulb}
--------------------------------------------------------------------------------
::: aside
```{r intellectual property aside}
CV %<>% print_text_block('intellectual_property_aside')
```
:::
```{r intellectual property data}
CV %<>% print_section('intellectual_property')
```

{{< fa book >}} Publications {data-icon=book}
--------------------------------------------------------------------------------
::: aside
```{r selected publications aside}
CV %<>% print_text_block('selected_publications_aside')
```
:::

```{r academic articles data}
CV %<>% print_section('academic_articles')
```

{{< fa chalkboard-teacher >}} Presentations & Talks {data-icon=chalkboard-teacher}
--------------------------------------------------------------------------------
::: aside
```{r presentations aside}
CV %<>% print_text_block('presentations_aside')
```
:::
```{r presentations data}
CV %<>% print_section('presentations')
```

:::{.no-print}
{{< fa leaf >}} Trainees & Direct Reports {data-icon=leaf}
--------------------------------------------------------------------------------
:::: aside
```{r trainees and direct reports aside}
CV %<>% print_text_block('trainees_reports_aside')
```
::::
```{r trainees and direct reports data}
CV %<>% print_section('trainees_reports')
```
```{r links section}
CV %<>% print_links()
```
:::
